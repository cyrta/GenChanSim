

Memo to: File
Subject: Installing the Generic Channel Simulator
From:    Kurt Metzger
Date:    10 March 1998
	 16 March 1998 (revised)


Introduction
------------

This memo relates to the Generic Channel Simulator software package that we
received from Dr. C. Keller at Lincoln Laboratory and Dr. P. Bello of Bello
Inc.

We have offered to support making the Generic Channel Simulator available over
Web.  I believe this means that we will serve as a distribution point for the
source TAR file and a computerized version of the manual (PDF file?) and
provide a Web presence through HTML pages.  This includes an on-line HTML
version of the manual.

I have checked with the Department Computer Organization (DCO) and it appears
that we will be able to include a link to the GCS homepage on the ECCS
Department's web page and place at least the GCS home page itself on the
department's web server and possibly the HTML manual and the source code tar
file (rather than on a secondary server to be linked to).  I'll do preliminary
development in one of my personal Web page areas.

My understanding is the manual is presently being converted to HTML format
at Lincoln Laboratories and will be supplied to us.  We presently have only
copies of a preliminary version of the manual.  I assume that we will also be
receiving a machine readable version of the manual...in ps or pdf format.

It would be nice to have a GSM logo of some sort to spiff up the GCS homepage.

I have installed and run cursory tests of the Generic Channel Simulator on
three UNIX based systems.  These are two Sun SOLARIS based systems (the DCO
Soso and the MURI Golay computers) and an HP_UX based system (the ATOC Atoc1
computer).   An attempt is currently in progress to install on a CAEN Sun
system but the associated problems have not yet been resolved.  This memo
documents our current status and the changes that were needed to be made to the
MOTIF.alias files.

Installation starts with unTARing the source files.  This causes the source
code to be placed in a series of directories whose top level is GenChanSim.
There are two configuration files provided in GenChanSim.  One for use with
systems that support MOTIF (file name: MOTIF.alias) and one for systems that
do not support MOTIF (file name: NO_MOTIF.alias).

On the DCO maintained SOLARIS systems a number of library files needed to be
added to the library environment variable definitions.  Not all of these files
(and possibly none) have to be added to the CAEN Sun's environment.  Additions
are not necessary for the HP_UX system (leading one to think that there must
be another way to achieve the same result on the SOLARIS systems). For all
systems the paths to the include and library files had to be altered and the
location of the MOTIF root defined.

The initial installation attempt had problems that were traced to the presence
of already built library files in the cmdline subdirectory.  These appear to
have been accidentally included in the tar file sent to us. These library
files have been deleted and an updated tar file generated.

No significant testing of the GCS software itself has been done at this point.
Stating that the GenChanSim "works" simply means that it loads and generates
XWindow displays that look like the ones in the preliminary version of the GCS
manual.

I've run GCS on the HP_UX system directly from the console. I've run GCS
remotely over a network connection on both the SOLARIS and HP-UX systems using
an X windows host on a Windows NT V4.0 system (ethernet) and on a Windows 98
Beta 3 system (dial-up PPP). I've run the DCO Sun version from a CAEN Sun
console.  I've not run any of the DCO supported systems directly from the
console. Only minimal testing of GCS itself has been done.

One peculiarity that I noted when running the Sun and HP versions of mixedchan
side by side is that there are very small non zero default values in some of
the HP parameter entry boxes while the Sun shows values of zero.  I'm guessing
that some initializations are lacking somewhere.  This raises the question of
who if anyone is doing maintenance.

The displays generated by the GCS are fixed in pixel size and appear designed
for use on a high resolution screen (i.e., lots of pixels) and also appear to
require 75 dpi fonts. My NT display is 1152 by 882 pixels and some of the
displayed panels extended slightly beyond the screen in height.  I added a
virtual desktop program to provide a virtual screen three times larger in
height and width. This allowed me to move the displayed objects to see them in
their entirety (but not quite all at once).  At home my monitor is set to use
1280 by 1024 pixels and there are no clipping problems in displaying the GCS
panels. I had no display limiting problems on the HP system.  The display on
the CAEN Sun Ultra-SPARC systems appears to almost perfectly fit the larger
GCS selection panels (I only tried the mixedchan panel).

I think that most if not all Unix systems sold today come with X-windows
support.  A possible exception is LINUX.  I presently don't have a LINUX box
available for testing GCS.

On the INTEL/Windows systems a commercial X-windows display server needs to be
obtained if GCS is to be run on a server and accessed via a networked PC. I
tried out three X-windows display server programs on the PC platform.

The MI/X Server package (http://www.microimages.com/freestuf/mix/) is free.
There doesn't appear to be a manual with this.

The MI/X package included 200 75 dpi fonts but these had to be installed
manually.  MI/X generates a deep blue background to represent the active
screen area.  This is sized as 1012x882 pixels 8 bits deep.  Any X object that
is larger than this is clipped.  At least some of the GCS X objects are larger
in height and are clipped.  I poked around some and did not find a way to
change the size of the display area.  Other than the clipping problem the MI/X
program worked well.

I could not fit the mixedchan control panel into the screen.  The buttons on
the bottom could not be made (by me) to fit onto the screen.   The price is
right but because of the clipping I don't see how this program can be used
with the MOTIF displays produced by the GCS. This package is updated quarterly
and might evolve into a more usable (for GCS) state. The clipping problem
presently makes this program unsuitable for use with the GCS.

The StarNet Micro X-Win32 X server (http://www.starnet.com/docs/xwin32.html)
costs $200 with educational pricing available.  I tried out the demo version
of this program.  The Charter-Bold type fonts were missing but I located a set
and added them.  The displays look like those in the preliminary version of
the GCS report.  The X-Win32 program worked quite well.

Charter-Bold 18pt, was not present in the X-Win32 X windows host collection.
Upon checking it does not appear as if this font is present on the DCO
supported SOLARIS systems either. However, I've not yet run GCS from a DCO
SOLARIS console to check this. This font is included in the set available over
the CAEN net to the HP_UX system and to the Sun systems that CAEN supports.
The CAEN supported systems generate displays as expected. I added this font to
the X-Win32 collection on my NT. It seems likely that this font will also have
to be added to the set available on at least some SOLARIS systems. I've not
checked into any potential problems with the font license. Lacking the font is
not a fatal problem.  A substitute font can be specified.  However, this
causes the actual displays to differ from those in the manual.

The Hummingbird Exceed X server (http://www.hummingbird.com/products/exceed/)
costs about $300 with educational pricing available.  I'm told that this is
probably the best available X server for the PC.  Exceed at least appears to
be the most popular.  Hummingbird claims a 54% world wide market share. The
University of Michigan has a site license for Exceed and I purchased licenses
for the NT and W95 systems from ITD. This program works quite well.

The Hummingbird Exceed package came with 100 dpi fonts installed.  I had to
set these to inactive and install the 75 dpi fonts.  For some reason I had a
problem with the Charter-Bold 18 point font again.  It was present in the
distribution but did not seem to be accessible.  Rebuilding the supplied font
library fixed the problem.  This happened on both the NT and the W95 versions.

Other X windows server packages that I am aware of but have not otherwise
evaluated are:

   Reflections for X by Walker Richer and Quinn.  See http://www.wrq.com for
   more information. The list price for this is approximately $599.

   eXalt by Intergraph, see

        http://www.intergraph.com/iss/products/prodtool/nfs/ex_dl.pl

   for more information.  The price per single copy appears to be about $260.

   Chameleon UNIX Link 97 by NetManage, see

        http://www.netmanage.com/products/index.asp

   Price is $400.


Original MIT/LL Settings
------------------------

For reference these are the MOTIF.alias lines modified in getting the GCS
software to compile and run on the SOLARIS and HP_UX computers.  They are
embedded in differing parts of the top of the MOTIF.alias file in the order
given.

setenv SIMLIBS '-lcmd -lXm -lXt -lX11'
setenv MIXEDSIMLIBS '-lmixedcmd -lXm -lXt -lX11'
setenv VHFSIMLIBS '-lvhfcmd -lXm -lXt -lX11'
setenv AIRSIMLIBS '-laircmd -lXm -lXt -lX11'
setenv AIRGRSIMLIBS '-lairgrcmd -lXm -lXt -lX11'
setenv FLATSIMLIBS '-lflatcmd -lXm -lXt -lX11'
setenv HFLIBS '-lcmd -lXm -lXt -lX11'

setenv SIMDIR /elmer/data2/bello/GenChanSim
setenv HFDIR /elmer/data2/bello/GenChanSim

setenv SIM_I '-I${SIMDIR}/misc -I${SIMDIR}/cmdline -I${MOTIF}/include \
              -I/usr/local/X11R5/include'
setenv SIM_L '-L/usr/local/X11R5/lib -L${SIMDIR}/cmdline \
              -L/usr/local/gnu/lib/gcc-lib/sparc-sun-sunos4.1.4/2.7.2'
setenv HF_I '-I${HFDIR}/misc -I${HFDIR}/cmdline -I${MOTIF}/include \
             -I/usr/local/X11R5/include'
setenv HF_L '-L/usr/local/X11R5/lib -L${HFDIR}/cmdline \
             -L/usr/local/gnu/lib/gcc-lib/sparc-sun-sunos4.1.3/2.5.7'

setenv MOTIF /usr/local/Motif-1.1.4


Golay's Solaris Settings
------------------------

Initially it did not appear to me that MOTIF was not present on Golay.  Because
of this I made an NO_MOTIF.alias based initial installation.  Later I learned
that Mark Casciato had managed to install a MOTIF version on the MURI Sun
located in the Radiation Laboratory.  Mark furnished me with a copy of his
MOTIF.alias file on which I based my installation.  Even with this information
there still remained a problem building modules.  This problem was eventually
determined to be caused by the absence of the libXm.a library file.  DCO's
Laura Falk quickly installed this library for me and Chuck Nichols ran the
first successful Golay make as a test.

One concern is that libXm.a was used instead of libXm.so because a copy of the
dynamic (.so) library couldn't be located.  I don't know whether or not this
is going to cause problems down the time line.

The installation on Golay required a bit of effort in tracing down the
names and locations of all of the necessary library modules.  I decided to
remove the library module specifications that Mark had added and see what was
involved in determining which library module specifications needed to be
added. The thought being to document the procedure in case someone has to
repeat the process in doing a port to another system.

The procedure that I came up with is probably not the world's best but it
got the job done.

The two library directories that were involved were /usr/lib and
/usr/X11R5/lib.

In particular this is the list that I was faced with.

socket                              /usr/X11R5/lib/libX11.so
IceProcessMessages                  /usr/X11R5/lib/libXt.so
getpeername                         /usr/X11R5/lib/libX11.so
SmcDeleteProperties                 /usr/X11R5/lib/libXt.so
XShapeCombineMask                   /usr/lib/libXm.a(DragOverS.o)
xdrmem_create                       /usr/X11R5/lib/libX11.so
XShapeQueryExtension                /usr/lib/libXm.a(Display.o)
SmcSaveYourselfDone                 /usr/X11R5/lib/libXt.so
gethostbyname_r                     /usr/X11R5/lib/libX11.so
SmcGetIceConnection                 /usr/X11R5/lib/libXt.so
regex                               /usr/lib/libXm.a(Xmos.o)
setsockopt                          /usr/X11R5/lib/libX11.so
SmcRequestSaveYourselfPhase2        /usr/X11R5/lib/libXt.so
SmcSetProperties                    /usr/X11R5/lib/libXt.so
SmcClientID                         /usr/X11R5/lib/libXt.so
authdes_create                      /usr/X11R5/lib/libX11.so
inet_addr                           /usr/X11R5/lib/libX11.so
SmcCloseConnection                  /usr/X11R5/lib/libXt.so
regcmp                              /usr/lib/libXm.a(Xmos.o)
SmcOpenConnection                   /usr/X11R5/lib/libXt.so
SmcModifyCallbacks                  /usr/X11R5/lib/libXt.so
IceConnectionNumber                 /usr/X11R5/lib/libXt.so
XShapeCombineRectangles             /usr/lib/libXm.a(DragOverS.o)
shutdown                            /usr/X11R5/lib/libX11.so
getsockname                         /usr/X11R5/lib/libX11.so
SmcInteractDone                     /usr/X11R5/lib/libXt.so
SmcInteractRequest                  /usr/X11R5/lib/libXt.so
getservbyname_r                     /usr/X11R5/lib/libX11.so
connect                             /usr/X11R5/lib/libX11.so

For example to find the library file containing socket I used the commands:

     cat * | strings | grep 'socket.o'
     fgrep -l 'socket.o' *

     [ 16 ] GenChanSim -: cd /usr/lib
     [ 17 ] lib -: cat * | strings | grep 'socket.o'
     socket.o/       831094935   0     1     100664  864       .
     socket operation on non-socket
     [ 18 ] lib -: fgrep -l 'socket.o' *
     libsocket.a
     [ 19 ] lib -:

The library file designator -lsocket was then added to the setenv statements
and another run made to determine what remained to be located.

The XShapeCombineMask item was a bit harder.  Doing the initial search gave a
number of responses.  The file containing the %XShapeCombineMask string was
assumed to be the defining file.  The fgrep command was used to identify this
file.

     [ 3 ] lib -: cat * | strings | grep 'XShapeCombineMask'
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     .text%XShapeCombineMask
     .rela.text%XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     XShapeCombineMask
     [ 4 ] lib -: fgrep -l '%XShapeCombineMask' *
     libXext.a
     [ 5 ] lib -:

The library specification -lXext was added to the setenv lines and another
make run was made.

I found differences in the ability of the various greps to find strings
embedded in mixed binary/ascii files. I tried grep, fgrep, and egrep.  They
gave differing results.  The fgrep utility was the more reliable likely
because it focuses on strings.

The above procedure was repeated until there were no longer any missing
libraries.  It turns out that the regex and regcmp functions are defined in
two libraries.  I picked -lform (Mark had chosen -lgen) to see if there was a
problem with choosing one library over the other.  The program seems to work.

The MOTIF.alias lines modified to build GCS on the SOLARIS system are:

setenv SIMLIBS '-lcmd -lXm -lXt -lX11 -lsocket -lICE -lSM -lXext -lform'
setenv MIXEDSIMLIBS '-lmixedcmd -lXm -lXt -lX11 -lsocket -lICE -lSM -lXext -lform'
setenv VHFSIMLIBS '-lvhfcmd -lXm -lXt -lX11 -lsocket -lICE -lSM -lXext -lform'
setenv AIRSIMLIBS '-laircmd -lXm -lXt -lX11 -lsocket -lICE -lSM -lXext -lform'
setenv AIRGRSIMLIBS '-lairgrcmd -lXm -lXt -lX11 -lsocket -lICE -lSM -lXext -lform'
setenv FLATSIMLIBS '-lflatcmd -lXm -lXt -lX11 -lsocket -lICE -lSM -lXext -lform'
setenv HFLIBS '-lcmd -lXm -lXt -lX11 -lsocket -lICE -lSM -lXext -lform'

setenv SIMDIR /y/metzger/GenChanSim
setenv HFDIR /y/metzger/GenChanSim

setenv SIM_I '-I${SIMDIR}/misc -I${SIMDIR}/cmdline -I${MOTIF}/include \
              -I/usr/X11R5/include'
setenv SIM_L '-L/usr/X11R5/lib -L${SIMDIR}/cmdline -L/usr/lib'
setenv HF_I '-I${HFDIR}/misc -I${HFDIR}/cmdline -I${MOTIF}/include \
             -I/usr/X11R5/include'
setenv HF_L '-L/usr/X11R5/lib -L${HFDIR}/cmdline -L/usr/lib'

setenv MOTIF /usr/openwin


Soso's Solaris Settings
-----------------------

Both Soso and Golay are maintained by DCO.  The with the exception of the
installation path specifications (SIMDIR and HFDIR) the install repeated that
of Golay.  The install was done working from an Ultra-SPARC Slate located in
one of the fourth floor CAEN labs.

There were no font problems (CAEN has all the fonts).  The mixedchan display
appeared to perfectly fit the screen.


CAEN Slate Settings
-------------------

We've not managed the complete the install at this time.  The compile and
build phases appear to properly go to completion.  When mixedchan is attempted
to be run the dynamic loader claims that it can't open the library file
libXt.5.0. I think the problem is in the search paths used by CAEN.  The
libXt.5.0 file lies in the /usr/X11R5/lib directory.  The /usr/lib directory
contains an earlier version libXt.4.0.  I suspect that the /usr/X11R5/lib path
is not being supplied to the dynamic loader.  This will be pursued.

The -lICE -lSM specifications on the setenv lines used on the DCO Suns had to
be removed in order for GCS to be generated.  Tests were not run to see if the
-lsocet -lXext and -lform specifications were or were not required as well.


HP-UX Settings
--------------

The Generic Channel Simulator was also installed on the ATOC project's HP-UX
system, ATOC1.  This machine is presently lightly utilized and was already
running a MOTIF based display manager.  The installation was complicated by an
older version of the system (V9.01) being present instead of the more current
version (V10.20) (present on the other CAEN supported machines).  It took
adding a new disk and a system upgrade before I was able to install the MOTIF
version of the GCS.  Once everything was in place the installation went
smoothly.

The MOTIF.alias lines relevant to the HP_UX make are:

setenv SIMLIBS '-lcmd -lXm -lXt -lX11'
setenv MIXEDSIMLIBS '-lmixedcmd -lXm -lXt -lX11'
setenv VHFSIMLIBS '-lvhfcmd -lXm -lXt -lX11'
setenv AIRSIMLIBS '-laircmd -lXm -lXt -lX11'
setenv AIRGRSIMLIBS '-lairgrcmd -lXm -lXt -lX11'
setenv FLATSIMLIBS '-lflatcmd -lXm -lXt -lX11'
setenv HFLIBS '-lcmd -lXm -lXt -lX11'

setenv SIMDIR /l/metzger/GenChanSim
setenv HFDIR /l/metzger/GenChanSim

setenv SIM_I '-I${SIMDIR}/misc -I${SIMDIR}/cmdline -I${MOTIF}/include \
              -I/usr/X11R5/include'
setenv SIM_L '-L/usr/X11R5/lib -L${SIMDIR}/cmdline -L/usr/lib'
setenv HF_I '-I${HFDIR}/misc -I${HFDIR}/cmdline -I${MOTIF}/include \
             -I/usr/X11R5/include'
setenv HF_L '-L/usr/X11R5/lib -L${HFDIR}/cmdline -L/usr/lib'

setenv MOTIF /usr/X11R5

