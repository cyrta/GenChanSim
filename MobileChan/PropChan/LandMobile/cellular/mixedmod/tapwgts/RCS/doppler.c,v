head	3.0;
access;
symbols;
locks; strict;
comment	@ * @;


3.0
date	94.08.30.18.32.40;	author jjb;	state Exp;
branches;
next	2.2;

2.2
date	94.07.25.18.47.02;	author jjb;	state Exp;
branches;
next	;


desc
@routine for doppler shift.
@


3.0
log
@added step as argument to allow code to handle steps of greater than
one.
cleaned up sine table lookup usage to indicate that table gives -sine
not sine.
@
text
@/*---------------------------------------------------------------------------*/
/* doppler.c - Introduce a doppler shift on the chosen IIR filter output as a*/
/*         complex multiply by a rotating phasor                             */
/*---------------------------------------------------------------------------*/
/*                                                                           */
/*

   copyright (c) 1994 The MITRE Corporation Bedford, MA

   $Id: doppler.c,v 2.2 1994/07/25 18:47:02 jjb Exp jjb $
   $Log: doppler.c,v $
 * Revision 2.2  1994/07/25  18:47:02  jjb
 * added copyright notice
 *

*/
#include <math.h>
#include <complex.h>
#include <mobilechan.h>

#define FRACMASK 0x007fffff  /* 2**23-1 used to mask fractional index*/

static char rcsid[] = "$Id: doppler.c,v 2.2 1994/07/25 18:47:02 jjb Exp jjb $";

void doppler(unsigned int phasor[], unsigned int phaseincr[],
                      float trigtbl[], fcomplex iqbuf[],
                      int ntaps, int start_tap, float doppscal, int step)
{
	float iout, qout;
	int cosndex, sinndex, filtnum;
	float alpha, sinphi, cosphi;
	unsigned int *phasor_ptr, *phaseincr_ptr;

	phasor_ptr = phasor + start_tap;
	phaseincr_ptr = phaseincr + start_tap;
	for (filtnum=0; filtnum < ntaps; ++filtnum) {
		/* rotate phasor by increment */

		*phasor_ptr += (*phaseincr_ptr) * (unsigned int)step;
	
		/* get integer part of indices to sin and cos table*/
	
		cosndex = (int) (*phasor_ptr >> TRIGSHFT);
		sinndex = (cosndex + TRIGOFST) & TRIGMASK;
		  
		/* get fractional part of indices to sin and cos table*/
		  
		alpha = (float) (*phasor_ptr & FRACMASK) * doppscal;
		/* calculate sin(phi) and cos(phi) by linear interpolation */
		  
		sinphi = trigtbl[sinndex] + alpha* (trigtbl[sinndex+1] -
						   trigtbl[sinndex]);
		cosphi = trigtbl[cosndex] + alpha* (trigtbl[cosndex+1] -
						   trigtbl[cosndex]);
	
		/* negate sine since table lookup really found -sine */

		sinphi = -1.0 * sinphi;
	
		/* do complex mult to implement actual phase rotation needed*/
		  
		iout = cosphi * iqbuf[filtnum].r -
		sinphi * iqbuf[filtnum].i;
		qout = cosphi * iqbuf[filtnum].i +
		sinphi * iqbuf[filtnum].r;
		iqbuf[filtnum].r = iout;
		iqbuf[filtnum].i = qout;
	
		phasor_ptr++;
		phaseincr_ptr++;
	}
}
@


2.2
log
@added copyright notice
@
text
@d10 5
a14 2
   $Id$
   $Log$
d23 1
a23 1
static char rcsid[] = "$Id$";
d27 1
a27 1
                      int ntaps, int start_tap, float doppscal)
d38 2
a39 6
		/* Increment was replaced by decrement to solve a spectrum inversion
		 * problem in the HFWB facility.
		 * This fudge results in the sign of Doppler being flipped
		 */
	
		*phasor_ptr -= *phaseincr_ptr;
d56 3
a58 1
		/* next 3 lines for debug only*/
@
