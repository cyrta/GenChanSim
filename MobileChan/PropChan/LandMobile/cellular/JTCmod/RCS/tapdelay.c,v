head	3.0;
access;
symbols;
locks; strict;
comment	@ * @;


3.0
date	94.08.30.18.49.58;	author jjb;	state Exp;
branches;
next	2.2;

2.2
date	94.07.25.18.57.02;	author jjb;	state Exp;
branches;
next	;


desc
@tap delay line routine.
@


3.0
log
@updated rev number.
@
text
@/* tapdelay.c
 * this routine sets up a tapped delay line with ndelays pointers within it to
 * be used as ndelays0 delays.
 * 'tap' is the number of the tap being used
 * 'ndelays0' is the number of the delays in the tap
 * 'weight[]' is the weights to be multiplied
 * 's' is the value added to the tap
 * r.coutts
 
   copyright (c) 1994 The MITRE Corporation Bedford, MA

   $Id: tapdelay.c,v 2.2 1994/07/25 18:57:02 jjb Exp jjb $
   $Log: tapdelay.c,v $
 * Revision 2.2  1994/07/25  18:57:02  jjb
 * added copyright notice
 *

 */
#include	<malloc.h>
#include	<mobilechan.h>
#include	<complex.h>

static char rcsid[] = "$Id: tapdelay.c,v 2.2 1994/07/25 18:57:02 jjb Exp jjb $";

void 
tapdelay(
	 fcomplex * sum,	/* sum of taps (returned) */
	 int path,		/* path index */
	 int ndelays0,
	 fcomplex weight[],
	 fcomplex * s)
{
	static int      firstcall[NPATHS] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
					       1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
	/* flag for if first call to routine */
	static fcomplex *tapbuffer[NPATHS];	/* location of first cell of
						 * buffer */
	static fcomplex *data[NPATHS];	/* location of incoming data in
					 * buffer */
	fcomplex       *d;	/* location of scanned data in buffer */
	static fcomplex *endofbuffer[NPATHS];	/* location of last cell of
						 * buffer */
	static int      ndelays[NPATHS];	/* buffer size */
	int             i;	/* index to weight[] */

	if (firstcall[path]) {
		/* initialize buffer */
		ndelays[path] = ndelays0;
		data[path] = tapbuffer[path] =
			(fcomplex *) calloc(ndelays[path], sizeof(fcomplex));
		endofbuffer[path] = tapbuffer[path] + ndelays[path] - 1;
		firstcall[path] = NO;
	}
	/* add sample to buffer */
	data[path]->r = s->r;
	data[path]->i = s->i;
	/* multiply and sum */
	d = data[path];
	sum->r = 0.0;
	sum->i = 0.0;
#ifdef DEBUG
	if (path == 0)
		printf("\n");
	printf("%d: ", path);
#endif
	for (i = 0; i < ndelays[path]; i++) {
#ifdef DEBUG 
		printf("%.2f+j%.2f ", d->r, d->i);
		if ((i + 1) % 7 == 0)
			printf("\n   ");
#endif 
		sum->r += weight[i].r * d->r - weight[i].i * d->i;
		sum->i += weight[i].i * d->r + weight[i].r * d->i;
		if (--d < tapbuffer[path])
			d = endofbuffer[path];
	}
#ifdef DEBUG
	printf("\n", path);
#endif
	/* increment pointer and test for overlap */
	if (++data[path] > endofbuffer[path])
		data[path] = tapbuffer[path];
}
@


2.2
log
@added copyright notice
@
text
@d9 1
a9 1

d12 5
a16 2
   $Id$
   $Log$
d23 1
a23 1
static char rcsid[] = "$Id$";
@
